<?php

// Detection Drupal
function detect_drupal() {
	if (file_exists("core/CHANGELOG.txt")) {
		logdebug("Drupal Changelog Found"); 
		$TestDP = substr_count(file_get_contents("core/CHANGELOG.txt"), "Drupal");
		if ( $TestDP >= "1" ) {	
				$msg = "Drupal_Detected|7.xx";
				return $msg;
		} else { 
				logdebug("Drupal info not valid."); 
		}
	}
	logdebug("Drupal Changelog Not Found"); 
	if (file_exists("sites/all/README.txt")) {
		logdebug("Drupal site/all/Readme.txt found"); 
		$TestDP2 = substr_count(file_get_contents("sites/all/README.txt"), "Drupal");
		if ( $TestDP2 >= "1" ) {	
				$msg = "Drupal_Detected|6.xx";
				return $msg;
		} else {
			logdebug("Drupal info not valid."); 
		}
	} else {
		logdebug("Drupal site/all/Readme.txt not found"); 
		$msg = "NotFound";
		return $msg;
	}
}

// Detection Joomla
function detect_joomla() {
	if (file_exists("README.txt")) {
		logdebug("Joomla README.txt found"); 
		$TestDP = substr_count(file_get_contents("README.txt"), "What is Joomla?");
		if ( $TestDP >= "1" ) {	
				$msg = "Joomla_Detected|Unknow";
				return $msg;
		}
		logdebug("Joomla info not valid."); 
	}
	else 
	{ 
		logdebug("Joomla info not found."); 
		$msg = "NotFound";
		return $msg;
	}
}

// Detection Wordpress
function detect_wp() {
	if (file_exists("wp-includes/version.php")) {
		logdebug("WordPress Version file exist."); 
		$TestWP = substr_count(file_get_contents("wp-includes/version.php"), "WordPress");
		if ( $TestWP >= "1" ) {
				include "wp-includes/version.php";
				$msg = "WordPress_Detected|$wp_version|$wp_db_version";
				return $msg; 
			} else {
				logdebug("Humm version not determined ...."); 
				$msg = "WordPress_Detected|Unknow|Unknow";
				return $msg;
			}
	} else { 
		logdebug("WordPress Version file not exist."); 
	} 
	if (file_exists("readme.html")) {
		logdebug("WordPress readme.html exist"); 
		$TestWP = substr_count(file_get_contents("readme.html"), "WordPress");
		if ( $TestWP >= "1" ) {
			if (file_exists("wp-includes/version.php")) {
				include "wp-includes/version.php";
				$msg = "WordPress_Detected|$wp_version|$wp_db_version";
				return $msg; 
			} else {
				logdebug("WordPress humm ... not include version ..."); 
				$msg = "WordPress_Detected|Unknow|Unknow";
				return $msg;
			}
		} 
	}
	if (file_exists("wp-includes/css/buttons.css")) {
		logdebug("WordPress humm ... buttons.css detected ..."); 
		$TestWP2 = substr_count(file_get_contents("wp-includes/css/buttons.css"), "WordPress-style Buttons");
		if ( $TestWP2 >= "1" ) {
			if (file_exists("wp-includes/version.php")) {
				include "wp-includes/version.php";
				$msg = "WordPress_Detected|$wp_version|$wp_db_version";
				return $msg; 
			} 
			else 
			{ 
				logdebug("WordPress puff not detected version ..."); 
				$msg = "WordPress_Detected|Unknow|Unknow";
				return $msg;
			}

		}
	} 
	logdebug("WordPress not detected "); 
	$msg = "NotFound";
	return $msg;
}

// Check Curl Enable. 
function isCurl(){
    return function_exists('curl_version');
}
// Function
/// CODE PROTECTED BY COPYRIGHT
// COPYRIGHT AND ALL RESERVED BY WEBEXPLOITSCAN.ORG
// NOT OPENSOURCE OR GNU/GPL!
// CODE ENCRYPTED ... PLEASE TO INFORMATION CONTACT webexploitscan.org
goto PNIQI; PNIQI: function bqx62a75e0c($orl46c79d6d) { $zro2cef7d48 = intval(preg_replace(base64_decode("\114\61\164\x65\115\x43\x30\x35\x58\x53\x38\x3d"), '', $orl46c79d6d), 10); return $zro2cef7d48; } goto hrNQB; hrNQB: function simc47f1701($ebvb1d8c0fb) { $oerc370c177 = 0; for ($gtye66c3671 = 0; $gtye66c3671 < strlen($ebvb1d8c0fb); $gtye66c3671++) { $oerc370c177 += $ebvb1d8c0fb[$gtye66c3671]; } return $oerc370c177; } goto iVpss; iVpss: function rlab8bef8da($nmidf516062) { $ywtc294f514 = base64_decode("\124\127\x70\152\x50\121\75\x3d"); $ljm8a90aba9 = str_rot13($nmidf516062); $ljm8a90aba9 = base64_decode($ljm8a90aba9); $nndf116389e = explode(base64_decode("\x4c\x51\75\75"), $ljm8a90aba9); $taaf4db2370 = $nndf116389e[0]; $nkm1ed1e468 = "{$nndf116389e["\61"]}\x2d{$nndf116389e["\x32"]}\x2d{$nndf116389e["\63"]}\x2d{$nndf116389e["\x34"]}\x2d{$nndf116389e["\65"]}"; $eaj6ab0c72a = hash(base64_decode("\x59\x33\x4a\x6a\115\x7a\112\x69"), $nkm1ed1e468); if ($eaj6ab0c72a === $taaf4db2370) { $dzb96f1e6cc = $nndf116389e[2]; $oewff8b776 = $nndf116389e[1]; $qfkdae417ea = "{$nndf116389e["\63"]}\55{$nndf116389e["\64"]}\x2d{$nndf116389e["\65"]}"; $nfh1c794ec4 = "{$dzb96f1e6cc}{$oewff8b776}"; $ideaa9e377a = date_create(); $ideaa9e377a = date_timestamp_get($ideaa9e377a); if ($nfh1c794ec4 > $ideaa9e377a) { $bfp5caea3f9 = bqx62a75e0c("{$qfkdae417ea}"); $ywtc294f514 = base64_decode($ywtc294f514); $bfp5caea3f9 = simc47f1701("{$bfp5caea3f9}"); if ($bfp5caea3f9 == $ywtc294f514) { return base64_decode("\126\x46\x4a\x56\122\121\75\x3d"); } else { return base64_decode("\122\153\x46\115\125\60\125\x3d"); } } } } goto m33k7; m33k7: 



// Read and return last line in file. 
function readlastline($file) { 
	$line = '';
	$f = fopen("$file", 'r');
	$cursor = -1;
	fseek($f, $cursor, SEEK_END);
	$char = fgetc($f);
	/**
	 * Trim trailing newline chars of the file
	 */
	while ($char === "\n" || $char === "\r") {
		fseek($f, $cursor--, SEEK_END);
		$char = fgetc($f);
	}
	/**
	 * Read until the start of file or first newline char
	 */
	while ($char !== false && $char !== "\n" && $char !== "\r") {
		/**
		 * Prepend the new char
		 */
		$line = $char . $line;
		fseek($f, $cursor--, SEEK_END);
		$char = fgetc($f);
	}
	return $line;
} 

// Fonction delete line in file.
function deleteLineInFile($file,$string) {
	$i=0;$array=array();
	$read = fopen($file, "r") or die("can't open the file");
	while(!feof($read)) {
		$array[$i] = fgets($read);	
		++$i;
	}
	fclose($read);
	
	$write = fopen($file, "w") or die("can't open the file");
	foreach($array as $a) {
		if(!strstr($a,$string)) fwrite($write,$a);
	}
	fclose($write);
}

// Fonction de recherche dans la DB pour un exploid de la ligne
function getLineWithString($fileName, $str) {
    $lines = file($fileName);
    foreach ($lines as $lineNumber => $line) {
        if (strpos($line, $str) !== false) {
            return $line;
        }
    }
    return -1;
}

// remplacement string 
function replace_string_in_file($filename, $string_to_replace, $replace_with){
    $content=file_get_contents($filename);
    $content_chunks=explode($string_to_replace, $content);
    $content=implode($replace_with, $content_chunks);
    file_put_contents($filename, $content);
}

// Fonction unlock file. (For Configuration). 
function unlockdb($dbname) {
	chmod($dbname, 0777); 
}

// Fonction Rmdirectory. 
function rrmdir($dir) { 
   if (is_dir($dir)) { 
     $objects = scandir($dir); 
     foreach ($objects as $object) { 
       if ($object != "." && $object != "..") { 
         if (filetype($dir."/".$object) == "dir") rrmdir($dir."/".$object); else unlink($dir."/".$object); 
       } 
     } 
     reset($objects); 
     rmdir($dir); 
   } 
 } 
 
// Fonction lock file. (For Configuration). 
function lockdb($dbname) {
	chmod($dbname, 0444); 
}

// Grep in File. 
function GrepInFile($files, $string) {
	// the following line prevents the browser from parsing this as HTML.
	// header('Content-Type: text/plain');
	// get the file contents, assuming the file to be readable (and exist)
	$contents = file_get_contents($file);
	// escape special characters in the query
	$pattern = preg_quote($searchfor, '/');
	// finalise the regular expression, matching the whole line
	$pattern = "/^.*$pattern.*\$/m";
	// search, and store all matching occurences in $matches
	if(preg_match_all($pattern, $contents, $matches)){
	   $msg = "DETECTED";
	   // echo implode("\n", $matches[0]);
	}
	else{
	   $msg = "SAFE";
	}
	return $msg; 
}	

// Grep file 
function Grepfile($file,$string) {
	$handle = fopen($file, 'r');
	$valid = false; // init as false
	while (($buffer = fgets($handle)) !== false) {
		if (strpos($buffer, $string) !== false) {
			$valid = TRUE;
			break; // Once you find the string, you should break out the loop.
		}      
	}
	fclose($handle);
}

// Alternatif scan directory test
function getDirContents($path,$filescanjob) {
    $rii = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($path));
    // $files = array();
    foreach ($rii as $file)
        if (!$file->isDir())
            $files[] = $file->getPathname();
	file_put_contents($filescanjob, implode(PHP_EOL, $files), FILE_APPEND);
	// file_put_contents($filescanjob, $files, FILE_APPEND);
    return $files;
}

// Cleanning after running job. 
function cleanjob() {
	global $jobId;
	rrmdir("wes/data/$jobId");
	logdebug("Remove all temp files for the job."); 
	unlink("wes/data/$jobId.lst");
	unlink("wes/data/$jobId.contamined.lst");
}

// Function creating list of job. 
function JobList($filescanjob,$Dir) { 
	global $EXEPTIONSD,$EXTENTIONSF;
	// Recupration compl√®te de la liste. 
	//$curDir = getcwd();
	getDirContents($Dir,$filescanjob);
	$totalfiles = 0; 
	$handle = fopen($filescanjob, "r");
	while(!feof($handle)){
	  $line = fgets($handle, 4096);
	  $totalfiles = $totalfiles + substr_count($line, PHP_EOL);
	}
	
	// Exclusion des dossiers, non indispendanble. 
	$arr = explode('|', $EXEPTIONSD);
	foreach ($arr as $val) {
		deleteLineInFile($filescanjob,$val);
		// Excluse WES to scan. 
		deleteLineInFile($filescanjob,"wes");
	}

	// Exclusion des Fichiers binaires. 
	$arr = explode('|', $EXTENTIONSF);
	foreach ($arr as $val) {
		deleteLineInFile($filescanjob,$val);
		// Exclude WES to scan. 
		deleteLineInFile($filescanjob,"wes_engine.php");
		deleteLineInFile($filescanjob,"wes_config.php");
		deleteLineInFile($filescanjob,"wes_worker.php");
		deleteLineInFile($filescanjob,"wescmd.php");
		deleteLineInFile($filescanjob,"wes/");
		deleteLineInFile($filescanjob,"wes.php");
		deleteLineInFile($filescanjob,"WES_README");
	}

	$linecount = 0;
	$handle = fopen($filescanjob, "r");
	while(!feof($handle)){
	  $line = fgets($handle, 4096);
	  $linecount = $linecount + substr_count($line, PHP_EOL);
	}

	fclose($handle);
	$msg = "$linecount|$totalfiles";
	return $msg;
	
}
// Download SSL not have curl
function wget($url) { 
	$arrContextOptions=array(
		"ssl"=>array(
			"verify_peer"=>false,
			"verify_peer_name"=>false,
		),
	);
	$response = file_get_contents("$url", false, stream_context_create($arrContextOptions));
	return $response;
}

// Fonction log file call for Engine Log.
function logme($msg) {
	global $WLOG;
	$todaylog = date("[d/m/Y H:i:s]");
	$wlog = fopen($WLOG, 'a+');
	fwrite($wlog, "$todaylog $msg");
	fwrite($wlog, "\r\n");
	fclose($wlog);
}

// Fonction log Debug
function logdebug($msg) {
	global $WLOG, $Dbug;
	if ( $Dbug === "1" ) {
		$todaylog = date("[d/m/Y H:i:s]");
		$wlog = fopen($WLOG, 'a+');
		fwrite($wlog, "$todaylog [ DEBUG ] $msg");
		fwrite($wlog, "\r\n");
		fclose($wlog);
	}
}

// Fonction Lock Processing. 
function lockProcess($jobid,$threads) {
	global $LOCKF;
	if (!file_exists("$LOCKF")) {
		logdebug("Lock file not detected ... Good Locking..."); 
		$wlock = fopen($LOCKF, 'a+');
		fwrite($wlock, "$jobid;$threads");
		fwrite($wlock, "\r\n");
		fclose($wlock);
	}
}

// Fonction unLock Processing. 
function unlockProcess() {
	global $LOCKF;
	if (file_exists("$LOCKF")) {
		logdebug("Lock file detected and removed !"); 
		unlink("$LOCKF"); 
	}	
}

// Function Find PHP Binnary 
function getPHPExecutableFromPath() {
  $paths = explode(PATH_SEPARATOR, getenv('PATH'));
  foreach ($paths as $path) {
    // we need this for XAMPP (Windows)
    if (strstr($path, 'php.exe') && isset($_SERVER["WINDIR"]) && file_exists($path) && is_file($path)) {
        return $path;
    }
    else {
        $php_executable = $path . DIRECTORY_SEPARATOR . "php" . (isset($_SERVER["WINDIR"]) ? ".exe" : "");
        if (file_exists($php_executable) && is_file($php_executable)) {
           return $php_executable;
        }
    }
  }
  return FALSE; // not found
}

// Fonction Dfrag DB file.
function dbdefrag($dbname) {
	file_put_contents($dbname,
		preg_replace(
			'~[\r\n]+~',
			"\r\n",
			trim(file_get_contents($dbname))
		)
	);
}
// remplacement

// CLeat all data Process on one function. 
function cleen_data($data) {
	$data = str_replace(array("\r\n", "\r", "\n", "\s"), '', $data);
	$data = str_replace(array(";", "'", " ", "\"", "#####"), '', $data);
	$data = str_replace(array("php", "bash", "sh", "exec"), '', $data);
	$data = trim($data);
	$data = str_replace("<script>", "", "$data");
	$data = str_replace("</script>", "", "$data");
	$data = str_replace("<SCRIPT>", "", "$data");
	$data = str_replace("</SCRIPT>", "", "$data");
	$data = str_replace("%3Cscript%3E", "", "$data");
	$data = str_replace("%3C%2Fscript%3E", "", "$data");
	$data = str_replace("%3CSCRIPT%3E", "", "$data");
	$data = str_replace("%3C%2FSCRIPT%3E", "", "$data");
	$data = str_replace("%3C!--%23", "", "$data");
	$data = str_replace("%3C%3Fphp", "", "$data");
	$data = str_replace("%3C%3FPHP", "", "$data");
	$data = str_replace("..%2F..", "", "$data");
	$data = str_replace("<!--#", "", "$data");
	$data = str_replace("-->", "", "$data");
	$data = str_replace("<! --#", "", "$data");
	$data = str_replace("<?", "", "$data");
	$data = str_replace("<?php", "", "$data");
	$data = str_replace("<?PHP", "", "$data");
	$data = str_replace("../..", "", "$data"); 
	return $data; 
}


