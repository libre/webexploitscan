#!/bin/bash
#
#    Program : webexploitscan
#                   : New version 2017 - Add Autoupdate scanner. 
#
#     Author : Sa√Ød <libre@libre-cloud.org>
#                 :    http://github.com/libre'
#
#     Parameters : --help
#                 :       --version
#                 :
#    Licence : GPL
#      Notes : See --help for details
#======================================================================
#set -x

PROGNAME=`basename $0`
PROGPATH=`echo $0 | /bin/sed -e 's,[\\/][^\\/][^\\/]*$,,'`
REVISION="Vesrion: 2.0.0.0-RC1"
datelog=`date "+%F %H:%M:%S"`
FCONFIG="/etc/webexploitscan/webexploitscan.conf"
datefile=`date "+%F%H%M%S"`
CURRENTVERSION=`cat /etc/webexploitscan/rules.list.version | awk '{ print $1 }'`
RULESLIST="/etc/webexploitscan/rules.list"

# Test is root 
if [ "$(id -u)" != "0" ]; then
	echo "This script must be run as root" 1>&2
	echo "Please use sudo or execute on root" 1>&2
	exit 1
fi
# 
print_usage() {
        echo "Usage: $PROGNAME [-d ] [-c config ]"
		echo "     -c Different config location : default is /etc/webexploistscan/webexploitscan.conf"
		echo ""
		echo "		-d  Directory scan ex: -d /var/www"
        echo "		-f  File scan ex: -f /var/www/index.php"

	echo ""
		echo "Usage: $PROGNAME --help -h"
        echo "Usage: $PROGNAME --version -v -V"
}

print_help() {
        echo "$PROGNAME $REVISION"
        echo ""
        echo "Scanner for detect backdoor..."
        echo ""
        print_usage
        echo ""
        echo "webexploitscan Web Exploit. GPLv3 http://github.com/libre 2016"
        echo ""
        exit 0
#        support
}

# Function for Update Rules from Github
check_update() {
	if [ ! -d rulesupdate_tmp ] ; then 
		mkdir /tmp/rulesupdate_tmp
	else 
		rm -rf /tmp/rulesupdate_tmp
		mkdir /tmp/rulesupdate_tmp
	fi 
	echo "[ $datelog ] Check update rules .... " >> $WLOG
	wget -nvq https://raw.githubusercontent.com/libre/webexploitscan/master/etc/webexploitscan/rules.list.version -O /tmp/rulesupdate_tmp/rules.list.version
	wget -nvq https://raw.githubusercontent.com/libre/webexploitscan/master/etc/webexploitscan/rules.list -O /tmp/rulesupdate_tmp/rules.list
	wget -nvq https://raw.githubusercontent.com/libre/webexploitscan/master/etc/webexploitscan/rules.list.md5 -O /tmp/rulesupdate_tmp/rules.list.md5
	RULESVERSION=`cat /tmp/rulesupdate_tmp/rules.list.version | awk '{ print $1 }'`
	MD5RULES=`md5sum /tmp/rulesupdate_tmp/rules.list | awk '{ print $1 }'`
	MD5GOOD=`cat /tmp/rulesupdate_tmp/rules.list.md5 | awk '{ print $1 }'`
	if [ $RULESVERSION > $CURRENTVERSION ] ; then
		echo "[ $datelog ] Rules new version of rules current is $CURRENTVERSION new is $RULESVERSION" >> $WLOG
		echo "[ $datelog ] Running Update rules now !" >> $WLOG
		if [ $MD5RULES === $MD5GOOD ] ; then
		    echo "[ $datelog ] Check MD5 for rules update is Good !" >> $WLOG
			cat  /tmp/rulesupdate_tmp/rules.list | while read file
				do
					# Extract Download link
					DFILE=`echo $file | awk -F ";" '{ print $2}'`
					# Extract File name
					NFILE=`echo $file | awk -F ";" '{ print $1}'`
					# Extract MD5 Checksum
					MFILE=`echo $file | awk -F ";" '{ print $3}'`
					wget -nvq $DFILE -O /etc/webexploitscan/rules.d/$NFILE.conf
					MDFILE=`md5sum /etc/webexploitscan/rules.d/$NFILE.conf | awk '{ print $1 }'`
					if [ $MFILE != $MDFILE ] ; then
						rm -f /etc/webexploitscan/rules.d/$NFILE.conf
						echo "[ $datelog ] Rule MD5 Check is not correctly ! Rule Removed !" >> $WLOG
					else 
						echo "[ $datelog ] Rule $NFILE is OK for use ! Update OK " >> $WLOG
					fi 
				done
		else
			echo "[ $datelog ] Rules MD5 Check is not correctly ! Update stopped !" >> $WLOG
		fi
	else 
		echo "[ $datelog ] Rules List MD5 Check is not correctly ! Update stopped !" >> $WLOG
	fi
	echo "[ $datelog ] Update finished ! Update info version" >> $WLOG
	cp -fq /tmp/rulesupdate_tmp/rules.list /etc/webexploitscan/rules.list
	cp -fq /tmp/rulesupdate_tmp/rules.list.version /etc/webexploitscan/rules.list.version
	rm -rf /tmp/rulesupdate_tmp
	echo "[ $datelog ] Update finished ! Running scan .. Please wait ... " >> $WLOG

}

# Function email call after action. Call afer detect notification email = 1 usage: echo "my email message" | email "foo@bar.com" "new event happened" "serverX" "noreply@serverx.com"
email(){
  content="$(cat - )"; email="$1"; subject="$2"; fromname="$3"; from="$4"
  {
    echo "Subject: $subject"
    echo "From: $fromname <$from>";
    echo "To: $email";
    echo "$content"
  } | $(which sendmail) -F "$from" "$email"
}


# Function scanning directory
scan_dir(){
	#check_update()
	## Initialisation DB Rule
	#find $RULES -printf "%h/%f\n" | sed 1d > /var/run/webexploitscan/rules.list
	#RLIST="/var/run/webexploitscan/rules.list"
	RCOUNT=`cat $RULESLIST | wc -l`
	echo "[ $datelog ] [Starting] $RCOUNT Rules in DB" >> $WLOG
	if [ ! -d $1 ] ; then 
		echo "[ $datelog ] [ERROR] $1 is not directory" >> $WLOG
		exit 1
	fi
	# Building List of scan : 
	find $1 -type d > /var/run/webexploitscan/tmp_scandir.list
	# Running parsing process : 
	dircount=0
	cat /var/run/webexploitscan/tmp_scandir.list | while read line
	do
		dircount=$((dircount+1))
		TESTWHITEDIR=`cat $WLIST | grep $line | wc -l`
		if [ $TESTWHITEDIR != 0 ] ; then
			echo "[ $datelog ] Directory  $line is Whitelisted not scan !" >> $WLOG
		else
			TESTEXEPTION=`echo $line | grep "$EXEPTION" | wc -l`
			if [ $TESTEXEPTION != 0 ] ; then
				echo "[ $datelog ] Directory  $line is Whitelisted not scan !" >> $WLOG
			else
				find $line -type f -printf "%h/%f\n" | sed 1d >> /var/run/webexploitscan/tmp_$dircount.list
				cat /var/run/webexploitscan/tmp_$dircount.list | while read linefile
				do
					TASCII=`file $linefile | grep "ASCII" | wc -l`
					if [ $TASCII -eq 1 ] ; then
						# Check Exeption not scan by extention type. 
						FileExtention=`cut -d'.' -f2<<<"$linefile"`
						Check=`echo $FileExtention | grep -E "$EXTENTIONS" | wc -l`
						# Extention type is detected Break scan and skip file. 
						if [ $Check != 0 ] ; then
							echo "[ $datelog ] [Info] File Extention Skipped $FileExtention for file $linefile" >> $WLOG
						else
							scan_file $linefile
						fi	
#					else 
#						echo "[ $datelog ] [Info] File $linefile Skipped not Ascii Text or Empty" >> $WLOG
					fi
# Debug Mode
#					sleep 2
				done
				rm -f /var/run/webexploitscan/tmp_$line.list
				echo "[ $datelog ] Scan directory finish. $line" >> $WLOG
			fi
		fi
# Debug Mode
#					sleep 2
	done
	echo "[ $datelog ] Scan All is finished ! Directory $1" >> $WLOG
	exit 0
}

# Function scanninf file
scan_file() {
	#check_update()
	## Initialisation DB Rule
	RLIST="/var/run/webexploitscan/tmp_rules.list"
	find $RULES -printf "%h/%f\n" | sed 1d > $RLIST
	if [ ! -f $1 ] ; then 
		echo "[ $datelog ] [ERROR] $1 is not regular file for scan please check" >> $WLOG
	fi
	# Scan process
	#echo "[ $datelog ] Scan file $1" >> $WLOG
	# Get permision of file.
	PERM=`stat -c "%a %n" $1 |  awk '{ print $1 }'`
	# Lock the file for checking. 
	chmod +044 $1
	cat $RLIST | while read line
	do
		# Incluing Config rules for scan. 
		. $line
		if [ "$ACTIVED" = "1" ] ; then 	
			if [ ! -z "$TAGCLEAR"  ] ; then
				TESTC=`grep -roiE -e "$TAGCLEAR" $1 | sort -u | wc -l`
			else
				TESTC="0"
			fi
			if [ ! -z "$TAGBASE64" ] ; then
				TESTB=`grep -roiE -e "$TAGBASE64" $1 | sort -u | wc -l`
			else
				TESTB="0"

			fi
			if [ ! -z "$TAGHEX" ] ; then
				TESTH=`grep -roiE -e "$TAGHEX" $1 | sort -u | wc -l`
			else
				TESTH="0"
			fi
			if [ ! -z "$TAGHEXPHP" ] ; then
				TESTHP=`grep -roiE -e "$TAGHEXPHP" $1 | sort -u | wc -l`
			else
				TESTHP="0"
			fi
			if [ ! -z "$TAGURI" ] ; then
				TESTU=`grep -roiE -e "$TAGURI" $1 | sort -u | wc -l`
			else
				TESTU="0"
			fi
			if [ ! -z "$TAGCLEAR2" ] ; then
				TESTC2=`grep -roiE -e "$TAGCLEAR2" $1 | sort -u | wc -l`
			else
				TESTC2="0"
			fi
			if [ ! -z "$TAGBASE642" ] ; then
				TESTB2=`grep -roiE -e "$TAGBASE642" $1 | sort -u | wc -l`
			else
				TESTB2="0"
			fi
			if [ ! -z "$TAGHEX2" ] ; then
				TESTH2=`grep -roiE -e "$TAGHEX2" $1 | sort -u | wc -l`
			else
				TESTH2="0"
			fi
			if [ ! -z "$TAGHEXPHP2" ] ; then
				TESTHP2=`grep -roiE -e "$TAGHEXPHP2" $1 | sort -u | wc -l`
			else
				TESTHP2="0"
			fi
			if [ ! -z "$TAGURI2" ] ; then
				TESTU2=`grep -roiE -e "$TAGURI2" $1 | sort -u | wc -l`
			else
				TESTU2="0"
			fi
			if [ "$TESTC" = "1" ] || [ "$TESTC" = "1" ] ; then 
				echo "[ $datelog ] [Detected] /!\ Suspicious file: $1" >> $WLOG
				echo "[ $datelog ] [Detected] /!\ File is probably $NAME" >> $WLOG
				echo "[ $datelog ] [Detected] /!\ Date in DB: $DATEADD" >> $WLOG
				echo "[ $datelog ] [Detected] /!\ Signature type: Clear" >> $WLOG
				action_file $1
			fi
			if [ "$TESTB" = "1" ] || [ "$TESTB2" = "1" ]  ; then 
				echo "[ $datelog ] [Detected] /!\ Suspicious file: $1" >> $WLOG
				echo "[ $datelog ] [Detected] /!\ File is probably $NAME" >> $WLOG
				echo "[ $datelog ] [Detected] /!\ Date in DB: $DATEADD" >> $WLOG
				echo "[ $datelog ] [Detected] /!\ Signature type: Base64" >> $WLOG				
				action_file $1
			fi
			if [ "$TESTH" = "1" ] || [ "$TESTH2" = "1" ]  ; then 
				echo "[ $datelog ] [Detected] /!\ Suspicious file: $1" >> $WLOG
				echo "[ $datelog ] [Detected] /!\ File is probably $NAME" >> $WLOG
				echo "[ $datelog ] [Detected] /!\ Date in DB: $DATEADD" >> $WLOG
				echo "[ $datelog ] [Detected] /!\ Signature type: Hexa" >> $WLOG				
				action_file $1
			fi			
			if [ "$TESTHP" = "1" ] || [ "$TESTHP2" = "1" ]  ; then 
				echo "[ $datelog ] [Detected] /!\ Suspicious file: $1" >> $WLOG
				echo "[ $datelog ] [Detected] /!\ File is probably $NAME" >> $WLOG
				echo "[ $datelog ] [Detected] /!\ Date in DB: $DATEADD" >> $WLOG
				echo "[ $datelog ] [Detected] /!\ Signature type: Hexa encoded" >> $WLOG				
				action_file $1
			fi
			if [ "$TESTU" = "1" ] || [ "$TESTU2" = "1" ]  ; then 
				echo "[ $datelog ] [Detected] /!\ Suspicious file: $1" >> $WLOG
				echo "[ $datelog ] [Detected] /!\ File is probably $NAME" >> $WLOG
				echo "[ $datelog ] [Detected] /!\ Date in DB: $DATEADD" >> $WLOG
				echo "[ $datelog ] [Detected] /!\ Signature type: URI/URL Encoded" >> $WLOG				
				action_file $1
			fi
		#else 
			#echo "[ $datelog ] [Info] Rules $line not actived." >> $WLOG
# Debug Mode
#					sleep 2
		fi
	done
	chmod +$PERM $1
}

# Function call after postif scan. Check and apply action.
action_file() { 
	if [ "$ACTION" = "RENAME" ] ; then
		mv -f $1 $1.webexploitscan_suspected
		echo "[ $datelog ] [Detected] /!\ $1 rename to $1.suspected" >> $WLOG
	fi 
	if [ "$ACTION" = "MOVE" ] ; then
		mv -f $1 $QUARANTAINE
		echo "[ $datelog ] [Detected] /!\ $1 moved to $QUARANTAINE" >> $WLOG
	else
		echo "[ $datelog ] [Detected] /!\ $1 Warning only notify not action..." >> $WLOG
		# Restore file permision after check. 
		chmod +$PERM $InoOutLine
	fi
	
	if [ "$MAILNOTIF" = "1" ] ; then 
		echo -e "AntiwebXploit detected Backdoor !\n======================================================\n\nServer:$FROMADDR\nFile:$1\nAction:$ACTION\nVirus Name:$NAME\nDate in DB:$DATEADD\nLink Info:$LINK\n\nPlease check your server vulnerability !\nDeamon webexploitscan." | email "$TO" "$SUBJECT" "$FROMADDR" "$FROM" 
		echo "[ $datelog ] [Mail] Notification mail send to $TO." >> $WLOG 
	else
		echo "[ $datelog ] [NOMail] Notification mail disabled." >> $WLOG
	fi 
}


# If we have arguments, process them.
while test -n "$1"; do
	case "$1" in
		--help)
			print_help
			exit 0
			;;
		-h)
			print_help
			exit 0
			;;
		--version)
			echo ""				
			echo "$PROGNAME $REVISION"
			echo ""
			echo "Base Rules version : $CURRENTVERSION"
			exit 0
			;;
		-V)
			echo ""				
			echo "$PROGNAME $REVISION"
			echo ""
			echo "Base Rules version : $CURRENTVERSION"			
			exit 0
			;;
		-v)
			echo ""				
			echo "$PROGNAME $REVISION"
			echo ""
			echo "Base Rules version : $CURRENTVERSION"			
			exit 0
			;;	
		-c)
			FCONFIG=$2;
			shift;
			;;
		-d)
			DIRSCAN=$2;
			shift;
			;;		
		-f)
			InoOutLine=$2;
			shift;
			;;
		-r)
			FREPPORT=$2;
			shift;
			;;
		*)
			echo "Unknown argument: $1"
			print_usage
			exit 1
			;;
	esac
	shift
done

# Test specifique config not define, use default config file. 
if [ -z "$FCONFIG" ] ; then
	FCONFIG="/etc/webexploitscan/webexploitscan.conf"
fi


# Test config file exist ... 
if [ ! -e "$FCONFIG" ]; then
	echo "Your specified config file not exist" 1>&2
	echo "Please check the path" 1>&2
	exit 1
else
	. "$FCONFIG"
fi 

# Test White list file  file exist ...
if [ ! -e "$WLIST" ]; then
	touch $WLIST
fi 

# Detect directory for rules, not exist ... Running update ... 
if [ ! -d "$RULES" ]; then
	echo "WebExploitScan is not detect rules directory, please check.."
	echo "[ $datelog ] [ERROR] WebExploitScan is not detect rules directory, ..		[Wait]" >> $WLOG
	echo "[ $datelog ] [ERROR] WebExploitScan Running Update  Please wait for finish update rules" >> $WLOG
	mkdir $RULES
	check_update
fi

# Scan directory difine, test exist and running scan.  
if [ ! -z "$DIRSCAN" ]; then
	scan_dir $DIRSCAN
fi
# Scan file  difine, test exist and running scan. 
if [ ! -z "$InoOutLine" ]; then
	scan_file $InoOutLine
fi
# Scan directory tempory exist and running scan. 
if [ ! -d /var/run/antiwebxploitd ]; then
	mkdir -p /var/run/antiwebxploitd
fi


