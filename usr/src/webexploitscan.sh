#!/bin/bash
#
#    Program : webexploitscan
#                   : New version 2017 - Add Autoupdate scanner. 
#
#     Author : Saïd <libre@libre-cloud.org>
#                 :    http://github.com/libre'
#
#     Parameters : --help
#                 :       --version
#                 :
#    Licence : GPL
#      Notes : See --help for details
#======================================================================
#set -x

PROGNAME=`basename $0`
PROGPATH=`echo $0 | /bin/sed -e 's,[\\/][^\\/][^\\/]*$,,'`
REVISION="Vesrion: 2.0.0.0-RC1"
datelog=`date "+%F %H:%M:%S"`
FCONFIG="/etc/webexploitscan/webexploitscan.conf"
datefile=`date "+%F%H%M%S"`
CURRENTVERSION=`cat /etc/webexploitscan/rules.list.version | awk '{ print $1 }'`

# Test is root 
if [ "$(id -u)" != "0" ]; then
	echo "This script must be run as root" 1>&2
	echo "Please use sudo or execute on root" 1>&2
	exit 1
fi

# Function First runnong. 
prerunning() {
	# Test specifique config not define, use default config file. 
	if [ -z "$FCONFIG" ] ; then
		FCONFIG="/etc/webexploitscan/webexploitscan.conf"
	fi

	# Test config file exist ... 
	if [ ! -e "$FCONFIG" ]; then
		echo "Your specified config file not exist" 1>&2
		echo "Please check the path" 1>&2
		exit 1
	else
		. "$FCONFIG"
	fi 

	###
	# 2.0.0.1 
	#  Function Debug mode 
	#  
	if [ $Dbug -eq 1 ] ; then 
	# For Debug mode : 
		echo ""
		echo ""
		echo "██╗    ██╗███████╗██████╗ ███████╗██╗  ██╗██████╗ ██╗      ██████╗ ██╗████████╗███████╗ ██████╗ █████╗ ███╗   ██╗"
		echo "██║    ██║██╔════╝██╔══██╗██╔════╝╚██╗██╔╝██╔══██╗██║     ██╔═══██╗██║╚══██╔══╝██╔════╝██╔════╝██╔══██╗████╗  ██║"
		echo "██║ █╗ ██║█████╗  ██████╔╝█████╗   ╚███╔╝ ██████╔╝██║     ██║   ██║██║   ██║   ███████╗██║     ███████║██╔██╗ ██║"
		echo "██║███╗██║██╔══╝  ██╔══██╗██╔══╝   ██╔██╗ ██╔═══╝ ██║     ██║   ██║██║   ██║   ╚════██║██║     ██╔══██║██║╚██╗██║"
		echo "╚███╔███╔╝███████╗██████╔╝███████╗██╔╝ ██╗██║     ███████╗╚██████╔╝██║   ██║   ███████║╚██████╗██║  ██║██║ ╚████║"
		echo " ╚══╝╚══╝ ╚══════╝╚═════╝ ╚══════╝╚═╝  ╚═╝╚═╝     ╚══════╝ ╚═════╝ ╚═╝   ╚═╝   ╚══════╝ ╚═════╝╚═╝  ╚═╝╚═╝  ╚═══╝"
		echo "                                                                                                                 "
		echo ""
		echo "$REVISION"
		echo ""
		echo "All Verbose"
		echo ""
		echo "For max debug mode please change RUNSPEED to 2.0"
		echo "RUNSPEED in config file is $RUNSPEED"
		echo ""
		COUNTER=10
		 while [  $COUNTER -gt 0 ]; do
			echo "Scan start to $COUNTER sec"
			sleep 1
			 let COUNTER=COUNTER-1 
		 done
		# First active Verbose Bash 
		set -x 
		# Re difine all command verbose. 
		CP="cp --verbose -f"
		GREP="grep -roiE -e"
		WGET="wget -v"
	else
		CP="cp -f"
		GREP="grep -sroiE -e"
		WGET="wget -q"
	fi
	# Test wget exist for update 
	# Not exist skip update. 
	#
	if [ -e /usr/bin/wget ] || [ -x /usr/bin/wget ]; then
		# Detect directory for rules, not exist ... Running update ... 
		if [ ! -d "$RULES" ]; then
			echo "WebExploitScan is not detect rules directory, please check.."
			echo "[ $datelog ] [ERROR] WebExploitScan is not detect rules directory, ..		[Wait]" >> $WLOG
			echo "[ $datelog ] [ERROR] WebExploitScan Running Update  Please wait for finish update rules" >> $WLOG
			mkdir $RULES
			check_update
		else
			echo "[ $datelog ] [UPDATE] WebExploitScan Check Update DB Viral before scan !" >> $WLOG
			check_update
		fi
	else 
		echo "[ $datelog ] [ERROR] Update faild ... wget command not found please install !" >> $WLOG
	fi
	###
	# 2.0.0.1 
	# Test Check folder quarantain for move. 
	#
	if [ -d "$QUARANTAINE" ] ; then
		echo "[ $datelog ] [Info] Quarantaine Folder not found created !" >> $WLOG
		mkdir $QUARANTAINE
	fi

	# Test White list file  file exist ...
	if [ ! -e "$WLIST" ]; then
		touch $WLIST
	fi 
	
	# Scan directory tempory exist and running scan. 
	if [ ! -d /var/run/antiwebxploitd ]; then
		mkdir -p /var/run/antiwebxploitd
	fi

	###
	# 2.0.0.1 
	#  Function check job is running. 
	#  Add Protection broken processing for locking file scan.
	#  Restore Perm last scan file.
	if [ -e "$LOCKF" ]; then
		TestProcess=`ps ax | grep -w "[w]ebexploitscan" | awk '{ print $5 }' | grep webexploitscan | wc -l`
		if [ $TestProcess > 2 ]; then 
			echo "[ $datelog ] [Warning] Last run is Broken or stopped annormaly..." >> $WLOG
			PERMLOST=`ls -s $LOCKF | awk '{ print $1 }'`
			if [ $PERMLOST -ne 0 ]; then 
				FILELOST=`cat $LOCKF | awk '{ print $2 }'`
				PERMFLOST=`cat $LOCKF | awk '{ print $1 }'`
				chmod +$PERMFLOST $FILELOST
				echo "[ $datelog ] [Info] Restored perm for last file scanner broken..." >> $WLOG
				echo "[ $datelog ] [Info] Restored $PERMFLOST $FILELOST" >> $WLOG
				rm -f $LOCKF
				touch $LOCKF
			else
				echo "[ $datelog ] [Info] Restored Not loss perm file in Lock." >> $WLOG
				rm -f $LOCKF
				touch $LOCKF
			fi
		else
			echo "[ $datelog ] [ERROR] Process detected is running !" >> $WLOG
			exit 1
		fi
	else
		touch $LOCKF
	fi
	# Variable for final report
	dircount="0"
	totalFiles="0"
	totalFileNotAsci="0"
	totalFileEmpty="0"
	totalFileNotReguar="0"
	totalFileScanned="0"
	totalFileInfected="0"
	Skiped="0"
	totalSkip="0"
}

# Usage function
print_usage() {
        echo "Usage: $PROGNAME [-d ] [-c config ]"
		echo "     -c Different config location : default is /etc/webexploistscan/webexploitscan.conf"
		echo ""
		echo "		-d  Directory scan ex: -d /var/www"
        echo "		-f  File scan ex: -f /var/www/index.php"

	echo ""
		echo "Usage: $PROGNAME --help -h"
        echo "Usage: $PROGNAME --version -v -V"
}

# Help info function
print_help() {
        echo "$PROGNAME $REVISION"
        echo ""
        echo "Scanner for detect backdoor..."
        echo ""
        print_usage
        echo ""
        echo "webexploitscan Web Exploit. GPLv3 http://github.com/libre 2016"
        echo ""
        exit 0
#        support
}

# Function for Update Rules from Github
check_update() {
	if [ ! -d rulesupdate_tmp ] ; then 
		mkdir /tmp/rulesupdate_tmp
	else 
		rm -rf /tmp/rulesupdate_tmp
		mkdir /tmp/rulesupdate_tmp
	fi 
	echo "[ $datelog ] [UPDATE] Check update rules .... " >> $WLOG
	$WGET https://raw.githubusercontent.com/libre/webexploitscan/master/etc/webexploitscan/rules.list.version -O /tmp/rulesupdate_tmp/rules.list.version
	RULESVERSION=`cat /tmp/rulesupdate_tmp/rules.list.version | awk '{ print $1 }'`
	if [ $RULESVERSION -gt $CURRENTVERSION ] ; then
		echo "[ $datelog ] [UPDATE] Rules new version of rules current is $CURRENTVERSION new is $RULESVERSION" >> $WLOG
		echo "[ $datelog ] [UPDATE] Running Update rules now !" >> $WLOG
		$WGET https://raw.githubusercontent.com/libre/webexploitscan/master/etc/webexploitscan/rules.list -O /tmp/rulesupdate_tmp/rules.list
		$WGET https://raw.githubusercontent.com/libre/webexploitscan/master/etc/webexploitscan/rules.list.md5 -O /tmp/rulesupdate_tmp/rules.list.md5
		MD5RULES=`md5sum /tmp/rulesupdate_tmp/rules.list | awk '{ print $1 }'`
		MD5GOOD=`cat /tmp/rulesupdate_tmp/rules.list.md5 | awk '{ print $1 }'`
		if [ $MD5RULES == $MD5GOOD ] ; then
		    echo "[ $datelog ] [UPDATE] Check MD5 for rules update is Good !" >> $WLOG
			cat  /tmp/rulesupdate_tmp/rules.list | while read file
				do
					# Extract Download link
					DFILE=`echo $file | awk -F ";" '{ print $2}'`
					# Extract File name
					NFILE=`echo $file | awk -F ";" '{ print $1}'`
					# Extract MD5 Checksum
					MFILE=`echo $file | awk -F ";" '{ print $3}'`
					$WGET $DFILE -O /etc/webexploitscan/rules.d/$NFILE.conf
					MDFILE=`md5sum /etc/webexploitscan/rules.d/$NFILE.conf | awk '{ print $1 }'`
					if [ $MFILE != $MDFILE ] ; then
						rm -f /etc/webexploitscan/rules.d/$NFILE.conf
						echo "[ $datelog ] [UPDATE] Rule MD5 Check is not correctly ! Rule Removed !" >> $WLOG
					else 
						echo "[ $datelog ] [UPDATE] Rule $NFILE is OK for use ! Update OK " >> $WLOG
					fi 
				done
				$CP /tmp/rulesupdate_tmp/rules.list /etc/webexploitscan/rules.list
				$CP  /tmp/rulesupdate_tmp/rules.list.version /etc/webexploitscan/rules.list.version
				echo "[ $datelog ] Update finished ! Update to version $RULESVERSION" >> $WLOG
		else
			echo "[ $datelog ] [ERROR] Rules MD5 Check is not correctly ! Update stopped !" >> $WLOG
		fi
	else 
		echo "[ $datelog ] [Info] Current Version is Last Update not running update" >> $WLOG
		echo "[ $datelog ] [Info] Running Scan ... Please wait" >> $WLOG
	fi
	rm -rf /tmp/rulesupdate_tmp
}

# Function email call after action. Call afer detect notification email = 1 usage: echo "my email message" | email "foo@bar.com" "new event happened" "serverX" "noreply@serverx.com"
email(){
  content="$(cat - )"; email="$1"; subject="$2"; fromname="$3"; from="$4"
  {
    echo "Subject: $subject"
    echo "From: $fromname <$from>";
    echo "To: $email";
    echo "$content"
  } | $(which sendmail) -F "$from" "$email"
}

# Function scanning directory
scan_dir(){
	#check_update()
	## Initialisation DB Rule
	#find $RULES -printf "%h/%f\n" | sed 1d > /var/run/webexploitscan/rules.list
	#RLIST="/var/run/webexploitscan/rules.list"
	RCOUNT=`cat $RULESLIST | wc -l`
	echo "[ $datelog ] [Starting] $RCOUNT Rules in DB" >> $WLOG
	if [ ! -d $1 ] ; then 
		echo "[ $datelog ] [ERROR] $1 is not directory" >> $WLOG
		exit 1
	fi
	# Building List of scan : 
	find $1 -type d > /var/run/webexploitscan/tmp_scandir.list
	### 2.0.0.0.-rc1 
	#
	# Bug update for return methode 
	# https://serverfault.com/questions/259339/bash-variable-loses-value-at-end-of-while-read-loop
	#
	while read line;
	#do
	# Running parsing process : 
	#cat /var/run/webexploitscan/tmp_scandir.list | while read line
	do
		dircount=$((dircount+1))
		TESTWHITEDIR=`cat $WLIST | grep $line | wc -l`
		if [ $TESTWHITEDIR != 0 ] ; then
			echo "[ $datelog ] [Info] Directory  $line is Whitelisted not scan !" >> $WLOG
		else
			TESTEXEPTION=`echo $line | grep "$EXEPTION" | wc -l`
			if [ $TESTEXEPTION != 0 ] ; then
				echo "[ $datelog ] [Info] Directory  $line is Whitelisted not scan !" >> $WLOG
			else
				find $line  -maxdepth 1  -type f -printf "%h/%f\n" | sed 1d >> /var/run/webexploitscan/tmp_$dircount.list
				### 2.0.0.0.-rc1 
				#
				# Bug update for return methode 
				# https://serverfault.com/questions/259339/bash-variable-loses-value-at-end-of-while-read-loop
				#
				while read linefile;
				#cat /var/run/webexploitscan/tmp_$dircount.list | while read linefile
				do
					totalFiles=$((totalFiles+1))
					# 2.0.0.0-rc1
					# Optimize Processing by detection file not candidate for scan. 
					# Check extentions exeptions.	
					#FileExtention=`echo $linefile | sed 's|^.*\.||'`
					EXTENTIONSS="\.($EXTENTIONS)$"
					Check=`echo $linefile | grep -E "$EXTENTIONSS" | wc -l`
					# Extention type is detected Break scan and skip file. 
					if [ $Check != 0 ] ; then
						Skiped=$((Skiped+1))
						echo "[ $datelog ] [Info] File Extention Skipped $FileExtention for file $linefile" >> $WLOG
					else
						# 2.0.0.0-rc1
						# Optimize Processing by detection file not candidate for scan. 
						# Check File is Empty or not ASCII Text or not regular file !. 
						TTFILE=`ls -s $linefile | awk '{ print $1 }'`
						TypeFile=`file $linefile | grep "text" | wc -l`
						if [ ! -f "$linefile" ] ; then 
								echo "[ $datelog ] [Info] $linefile is not reguar file." >> $WLOG
								totalFileNotReguar=$((totalFileNotReguar+1))
						else 
							if  [ $TTFILE -eq 0 ] ; then 
								echo "[ $datelog ] [Info] $linefile is empty not scan" >> $WLOG
								totalFileEmpty=$((totalFileEmpty+1))
							else 
								if [ $TypeFile -eq 0 ] ; then
									echo "[ $datelog ] [Info] $linefile is not ASCII File" >> $WLOG
									totalFileNotAsci=$((totalFileNotAsci+1))
								else 
									totalFileScanned=$((totalFileScanned+1))
									scan_file $linefile
								fi
							fi
						fi 
					fi
					echo "$totalFiles $Skiped $totalFileNotReguar $totalFileEmpty $totalFileNotAsci $totalFileScanned"
					sleep $RUNSPEED
				done < /var/run/webexploitscan/tmp_$dircount.list
				totalSkip=$((Skiped+totalFileNotReguar+totalFileEmpty+totalFileNotAsci))
				rm -f /var/run/webexploitscan/tmp_$dircount.list
				rm -f /var/run/webexploitscan/tmp_$line.list
				echo "[ $datelog ] [Info] Scan directory finish. $line" >> $WLOG
			fi
		fi
	done < /var/run/webexploitscan/tmp_scandir.list 
	# totalSkip=$((Skiped+totalFileNotReguar+totalFileEmpty+totalFileNotAsci))
	echo "$totalSkip $Skiped $totalFileNotReguar $totalFileEmpty $totalFileNotAsci $totalFileInfected $totalFileScanned"
}

# Function scanninf file
scan_file() {
		#check_update()
		## Initialisation DB Rule
		RLIST="/var/run/webexploitscan/tmp_rules.list"
		find $RULES -printf "%h/%f\n" | sed 1d > $RLIST
		# Scan process
		#echo "[ $datelog ] Scan file $1" >> $WLOG
		# Get permision of file.
		PERM=`stat -c "%a %n" $1 |  awk '{ print $1 }'`
		### 2.0.0.0-RC1
		# Add Info lock in lockfile for interupt processing and restore Locked file.
		# Restore Locked file new run processing. 
		#
		echo $PERM $1 > $LOCKF
		# Lock the file for checking. 
		chmod +044 $1
		cat $RLIST | while read line
		do
			# Incluing Config rules for scan. 
			. $line
			
			###
			# 2.0.0.1 
			#  Optimization scanner 
			#  Use 2 actions grep ... not 8 by file 
			#  Use 4x - of processing
			#
			#  Look Config file
			
			if [ "$ACTIVED" = "1" ] ; then 
				if [ ! -z "$TAGCLEAR"  ] ; then
					TAG="$TAGCLEAR"
				fi
				if [ ! -z "$TAGBASE64" ] ; then 
					TAG="$TAG|$TAGBASE64"
				fi 
				if [ ! -z "$TAGHEX" ] ; then 
					TAG="$TAG|$TAGHEX"
				fi
				if [ ! -z "$TAGHEXPHP" ] ; then 
					TAG="$TAG|$TAGHEXPHP"
				fi
				if [ ! -z "$TAGURI" ] ; then 
					TAG="$TAG|$TAGURI"
				fi
				if [ ! -z "$TAGCLEAR2"  ] ; then
					TAG="$TAG|$TAGCLEAR2"
				fi
				if [ ! -z "$TAGBASE642" ] ; then 
					TAG="$TAG|$TAGBASE642"
				fi 
				if [ ! -z "$TAGHEX2" ] ; then 
					TAG="$TAG|$TAGHEX2"
				fi
				if [ ! -z "$TAGHEXPHP2" ] ; then 
					TAG="$TAG|$TAGHEXPHP2"
				fi
				if [ ! -z "$TAGURI2" ] ; then 
					TAG="$TAG|$TAGURI2"
				fi
				if  [ ! -z "$TAG" ] ; then
					TESTA=`$GREP "$TAG" $1 | sort -u | wc -l`
				else 
					TESTA="0"
				fi
				if [ "$TESTA" -gt "0" ] ; then 
					echo "[ $datelog ] [Suspicious] /!\ Suspicious file: $1" >> $WLOG
					echo "[ $datelog ] [Suspicious] /!\ File is probably $NAME" >> $WLOG
					echo "[ $datelog ] [Suspicious] /!\ Date in DB: $DATEADD" >> $WLOG
					totalFileInfected=$((totalFileInfected+1))
					action_file $1
				fi
			
			# if [ "$ACTIVED" = "1" ] ; then 	
				# if [ ! -z "$TAGCLEAR"  ] ; then
					# TESTC=`grep -roiE -e "$TAGCLEAR" $1 | sort -u | wc -l`
				# else
					# TESTC="0"
				# fi
				# if [ ! -z "$TAGBASE64" ] ; then
					# TESTB=`grep -roiE -e "$TAGBASE64" $1 | sort -u | wc -l`
				# else
					# TESTB="0"

				# fi
				# if [ ! -z "$TAGHEX" ] ; then
					# TESTH=`grep -roiE -e "$TAGHEX" $1 | sort -u | wc -l`
				# else
					# TESTH="0"
				# fi
				# if [ ! -z "$TAGHEXPHP" ] ; then
					# TESTHP=`grep -roiE -e "$TAGHEXPHP" $1 | sort -u | wc -l`
				# else
					# TESTHP="0"
				# fi
				# if [ ! -z "$TAGURI" ] ; then
					# TESTU=`grep -roiE -e "$TAGURI" $1 | sort -u | wc -l`
				# else
					# TESTU="0"
				# fi
				# if [ ! -z "$TAGCLEAR2" ] ; then
					# TESTC2=`grep -roiE -e "$TAGCLEAR2" $1 | sort -u | wc -l`
				# else
					# TESTC2="0"
				# fi
				# if [ ! -z "$TAGBASE642" ] ; then
					# TESTB2=`grep -roiE -e "$TAGBASE642" $1 | sort -u | wc -l`
				# else
					# TESTB2="0"
				# fi
				# if [ ! -z "$TAGHEX2" ] ; then
					# TESTH2=`grep -roiE -e "$TAGHEX2" $1 | sort -u | wc -l`
				# else
					# TESTH2="0"
				# fi
				# if [ ! -z "$TAGHEXPHP2" ] ; then
					# TESTHP2=`grep -roiE -e "$TAGHEXPHP2" $1 | sort -u | wc -l`
				# else
					# TESTHP2="0"
				# fi
				# if [ ! -z "$TAGURI2" ] ; then
					# TESTU2=`grep -roiE -e "$TAGURI2" $1 | sort -u | wc -l`
				# else
					# TESTU2="0"
				# fi
				# if [ "$TESTC" = "1" ] || [ "$TESTC" = "1" ] ; then 
					# echo "[ $datelog ] [Detected] /!\ Suspicious file: $1" >> $WLOG
					# echo "[ $datelog ] [Detected] /!\ File is probably $NAME" >> $WLOG
					# echo "[ $datelog ] [Detected] /!\ Date in DB: $DATEADD" >> $WLOG
					# echo "[ $datelog ] [Detected] /!\ Signature type: Clear" >> $WLOG
					# action_file $1
				# fi
				# if [ "$TESTB" = "1" ] || [ "$TESTB2" = "1" ]  ; then 
					# echo "[ $datelog ] [Detected] /!\ Suspicious file: $1" >> $WLOG
					# echo "[ $datelog ] [Detected] /!\ File is probably $NAME" >> $WLOG
					# echo "[ $datelog ] [Detected] /!\ Date in DB: $DATEADD" >> $WLOG
					# echo "[ $datelog ] [Detected] /!\ Signature type: Base64" >> $WLOG				
					# action_file $1
				# fi
				# if [ "$TESTH" = "1" ] || [ "$TESTH2" = "1" ]  ; then 
					# echo "[ $datelog ] [Detected] /!\ Suspicious file: $1" >> $WLOG
					# echo "[ $datelog ] [Detected] /!\ File is probably $NAME" >> $WLOG
					# echo "[ $datelog ] [Detected] /!\ Date in DB: $DATEADD" >> $WLOG
					# echo "[ $datelog ] [Detected] /!\ Signature type: Hexa" >> $WLOG				
					# action_file $1
				# fi			
				# if [ "$TESTHP" = "1" ] || [ "$TESTHP2" = "1" ]  ; then 
					# echo "[ $datelog ] [Detected] /!\ Suspicious file: $1" >> $WLOG
					# echo "[ $datelog ] [Detected] /!\ File is probably $NAME" >> $WLOG
					# echo "[ $datelog ] [Detected] /!\ Date in DB: $DATEADD" >> $WLOG
					# echo "[ $datelog ] [Detected] /!\ Signature type: Hexa encoded" >> $WLOG				
					# action_file $1
				# fi
				# if [ "$TESTU" = "1" ] || [ "$TESTU2" = "1" ]  ; then 
					# echo "[ $datelog ] [Detected] /!\ Suspicious file: $1" >> $WLOG
					# echo "[ $datelog ] [Detected] /!\ File is probably $NAME" >> $WLOG
					# echo "[ $datelog ] [Detected] /!\ Date in DB: $DATEADD" >> $WLOG
					# echo "[ $datelog ] [Detected] /!\ Signature type: URI/URL Encoded" >> $WLOG				
					# action_file $1
				# fi
			#else 
				#echo "[ $datelog ] [Info] Rules $line not actived." >> $WLOG
	# Debug Mode
						sleep $RUNSPEED
			# else 
				# echo "[ $datelog ] [INFO] /!\ Rule : $NAME is not active, skipped for scan." >> $WLOG
			fi
		done
		chmod +$PERM $1
	#fi 

}

# Function call after postif scan. Check and apply action.
action_file() { 
	if [ "$ACTION" = "RENAME" ] ; then
		mv -f $1 $1.suspected
		echo "[ $datelog ] [Detected] /!\ $1 rename to $1.suspected_$datefile" >> $WLOG
		echo "[ $datelog ] [Detected] /!\ $1 rename to $1.suspected" >> $WLOG
	fi 
	if [ "$ACTION" = "MOVE" ] ; then
		mv -f $1 $QUARANTAINE
		echo "[ $datelog ] [Detected] /!\ $1 moved to $QUARANTAINE" >> $WLOG
	else
		echo "[ $datelog ] [Detected] /!\ $1 Warning only notify not action..." >> $WLOG
		# Restore file permision after check. 
		chmod +$PERM $1
	fi
	###
	# 2.0.0.1 
	#  Notification by mail is actived or not. 
	#  Separeted for princpal Action function. 
	#  Look Config file
	if [ $ACTIVEMAILNOTIFICATION -eq 1 ] ; then
		echo -e "AntiwebXploit detected Backdoor !\n======================================================\n\nServer:$FROMADDR\nFile:$1\nAction:$ACTION\nVirus Name:$NAME\nDate in DB:$DATEADD\nLink Info:$LINK\n\nPlease check your server vulnerability !\nDeamon webexploitscan." | email "$TO" "$SUBJECT" "$FROMADDR" "$FROM" 
		echo "[ $datelog ] [Mail] Notification mail send to $TO." >> $WLOG 
	fi 
	# if [ "$ACTION" = "RENAME" ] ; then
		# mv -f $1 $1.webexploitscan_suspected
		# echo "[ $datelog ] [Detected] /!\ $1 rename to $1.suspected" >> $WLOG
	# fi 
	## 
	# Update 2.0.0.0-RC1 
	# Adapting NOTIF Option from Configfile. 
	
	# if [ "$ACTION" = "NOTIF" ] ; then
		# echo "[ $datelog ] [Detected] /!\ $1 Warning only notify not action..." >> $WLOG
		# Restore file permision after check. 
		# chmod +$PERM $InoOutLine
		# echo -e "AntiwebXploit detected Backdoor !\n======================================================\n\nServer:$FROMADDR\nFile:$1\nAction:$ACTION\nVirus Name:$NAME\nDate in DB:$DATEADD\nLink Info:$LINK\n\nPlease check your server vulnerability !\nDeamon webexploitscan." | email "$TO" "$SUBJECT" "$FROMADDR" "$FROM" 
		# echo "[ $datelog ] [Mail] Notification mail send to $TO." >> $WLOG 
		# mv -f $1 $1.webexploitscan_suspected
		# echo "[ $datelog ] [Detected] /!\ $1 rename to $1.suspected" >> $WLOG
	# fi 
	# if [ "$ACTION" = "MOVE" ] ; then
		# mv -f $1 $QUARANTAINE
		# echo "[ $datelog ] [Detected] /!\ $1 moved to $QUARANTAINE" >> $WLOG
	# else
		# echo "[ $datelog ] [Detected] /!\ $1 Warning only notify not action..." >> $WLOG
		# Restore file permision after check. 
		# chmod +$PERM $InoOutLine
	# fi

}


# If we have arguments, process them.
while test -n "$1"; do
	case "$1" in
		--help)
			print_help
			exit 0
			;;
		-h)
			print_help
			exit 0
			;;
		--version)
			echo ""				
			echo "$PROGNAME $REVISION"
			echo ""
			echo "Base Rules version : $CURRENTVERSION"
			exit 0
			;;
		-V)
			echo ""				
			echo "$PROGNAME $REVISION"
			echo ""
			echo "Base Rules version : $CURRENTVERSION"			
			exit 0
			;;
		-v)
			echo ""				
			echo "$PROGNAME $REVISION"
			echo ""
			echo "Base Rules version : $CURRENTVERSION"			
			exit 0
			;;	
		-c)
			FCONFIG=$2;
			shift;
			;;
		-d)
			DIRSCAN=$2;
			shift;
			;;		
		-f)
			InoOutLine=$2;
			shift;
			;;
		-r)
			FREPPORT=$2;
			shift;
			;;
		*)
			echo "Unknown argument: $1"
			print_usage
			exit 1
			;;
	esac
	shift
done

prerunning

# Scan directory difine, test exist and running scan.  
if [ ! -z "$DIRSCAN" ]; then
	if [ -d "$DIRSCAN" ]; then 
		result=`scan_dir $DIRSCAN`
		totalSkip=`echo $result | awk '{ print $1 }'`
		Skiped=`echo $result | awk '{ print $2 }'`
		totalFileNotReguar=`echo $result | awk '{ print $3 }'`
		totalFileEmpty=`echo $result | awk '{ print $4 }'`
		totalFileNotAsci=`echo $result | awk '{ print $5 }'`
		totalFileInfected=`echo $result | awk '{ print $6 }'`
		totalFileScanned=`echo $result | awk '{ print $7 }'`
		echo "[ $datelog ] [Info] Scan All is finished ! Directory $1" >> $WLOG
		echo "[ $datelog ] [Report] Scan started : $datelog" >> $WLOG				
		datelog=`date "+%F %H:%M:%S"`
		echo "[ $datelog ] [Report] Scan Finish : $datelog" >> $WLOG				
		echo "[ $datelog ] [Report] Scan for $1" >> $WLOG
		echo "[ $datelog ] [Report] Total Folder : $dircount" >> $WLOG
		echo "[ $datelog ] [Report] Total Files : $totalFiles" >> $WLOG
		echo "[ $datelog ] [Report] Total Skip files scan  : $totalSkip" >> $WLOG
		echo "[ $datelog ] [Report]   Skip file not regular files : $totalFileNotReguar" >> $WLOG
		echo "[ $datelog ] [Report]   Skip file is empty files : $totalFileEmpty" >> $WLOG
		echo "[ $datelog ] [Report]   Skip file not ascii text files : $totalFileNotAsci" >> $WLOG
		echo "[ $datelog ] [Report]   Scanned Files : $totalFileScanned" >> $WLOG
		echo "[ $datelog ] [Report]   Infected or suspected files  : $totalFileInfected" >> $WLOG
		rm -rf $LOCKF
		rm -rf /var/run/webexploitscan/*.*
		exit 0
	else 
		echo "[ $datelog ] [ERROR STOP] Folder selected is not folder !" >> $WLOG
		echo "[ $datelog ] [ERROR STOP] Folder selected is not folder ! Use -h for help"
		exit 1
	fi
fi

# Scan file  difine, test exist and running scan. 
if [ ! -z "$InoOutLine" ]; then
	if [ -f "$InoOutLine" ]; then 
		scan_file $InoOutLine
	else 
		echo "[ $datelog ] [ERROR STOP] File  selected is not file" >> $WLOG
		echo "[ $datelog ] [ERROR STOP] File  selected is not file Use -h for help"
		exit 1
	fi 
fi

