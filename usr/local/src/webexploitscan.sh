#!/bin/bash
#
#    Program : webexploitscan
#                   : New version 2017 - Add Autoupdate scanner. 
#
#     Author : Sa√Ød <libre@libre-cloud.org>
#                 :    http://github.com/libre'
#
#     Parameters : --help
#                 :       --version
#                 :
#    Licence : GPL
#      Notes : See --help for details
#======================================================================
# set -x
PROGNAME=`basename $0`
PROGPATH=`echo $0 | /bin/sed -e 's,[\\/][^\\/][^\\/]*$,,'`
REVISION="Vesrion: 2.0.0.0"
datelog=`date "+%F %H:%M:%S"`
FCONFIG="/etc/webexploitscan/webexploitscan.conf"
datefile=`date "+%F%H%M%S"`
URLupdate="https://github.com/libre/webexploitscan/etc/webexploitscan/rules.list"
print_usage() {
        echo "Usage: $PROGNAME [-d ] [-c config ]"
		echo "     -c Different config location : default is /etc/webexploistscan/webexploitscan.conf"
		echo ""
		echo "		-d  Directory scan ex: -d /var/www"
        echo "		-f  File scan ex: -f /var/www/index.php"

	echo ""
		echo "Usage: $PROGNAME --help -h"
        echo "Usage: $PROGNAME --version -v -V"
}

print_help() {
        echo "$PROGNAME $REVISION"
        echo ""
        echo "Scanner for detect backdoor..."
        echo ""
        print_usage
        echo ""
        echo "webexploitscan Web Exploit. GPLv3 http://github.com/libre 2016"
        echo ""
        exit 0
#        support
}


check_update() {



}

scan_dir(){
	## Initialisation DB Rule
	find $RULES -printf "%h/%f\n" | sed 1d > /var/run/webexploitscan/rules.list
	RLIST="/var/run/webexploitscan/rules.list"
	RCOUNT=`find $RULES -printf "%h/%f\n" | sed 1d | wc -l`
	echo "[ $datelog ] [Starting] List DB $RLIST genereted by $RULES directory" >> $WLOG
	echo "[ $datelog ] [Starting] $RCOUNT Rules in DB" >> $WLOG
	if [ ! -d $1 ] ; then 
		echo "[ $datelog ] [ERROR] $1 is not directory" >> $WLOG
		exit 1
	fi
	if [ "$1" != "$wline" ] ; then
		echo "Starting Scan directory $1"
		echo "Please wait"
		echo "[ $datelog ] Start scan Directory  $1" >> $WLOG
		find $1 -type f -printf "%h/%f\n" | sed 1d > /var/run/webexploitscan/tmp_scandir.list
		echo "[ $datelog ] Start building list scan file." >> $WLOG
		ListDirScan="/var/run/webexploitscan/tmp_scandir.list"
		cat $ListDirScan | while read line
			do
				scan_file $line
			done
		echo "[ $datelog ] Scan directory finish. $1" >> $WLOG
		echo "Scan directory OK, please check the log file $WLOG"
		rm -f /var/run/webexploitscan/tmp_scandir.list
		exit 0
	else
		echo "[ $datelog ] Error this directory is whitelisted please chec whitelist." >> $WLOG
		echo "The directrory is whitelisted please check whitelist"
		exit 1
	fi
}

scan_file() {
	## Initialisation DB Rule
	find $RULES -printf "%h/%f\n" | sed 1d > /var/run/webexploitscan/rules.list
	RLIST="/var/run/webexploitscan/rules.list"
	RCOUNT=`find $RULES -printf "%h/%f\n" | sed 1d | wc -l`
	echo "[ $datelog ] [Starting] List DB $RLIST genereted by $RULES directory" >> $WLOG
	echo "[ $datelog ] [Starting] $RCOUNT Rules in DB" >> $WLOG	
	
	if [ ! -f $1 ] ; then 
		echo "[ $datelog ] [ERROR] $1 is not regular file for scan please check" >> $WLOG
		exit 1
	fi

	# Scan process
	if [ "$InoOutLine" != "$wline" ] ; then
		echo "[ $datelog ] Start scan file$1" >> $WLOG
		# Get permision of file.
		PERM=`stat -c "%a %n"$1 |  awk '{ print $1 }'`
		# Lock the file for checking. 
		chmod 044 $1
		cat $RLIST | while read line
		do
			. $line
			if [ "$ACTIVED" = "1" ] ; then 	
				if [ ! -z "$TAGCLEAR"  ] ; then
					TESTC=`$GREP -roiE -e "$TAGCLEAR" $1 | sort -u | wc -l`
				else
					TESTC="0"
				fi
				if [ ! -z "$TAGBASE64" ] ; then
					TESTB=`$GREP -roiE -e "$TAGBASE64" $1 | sort -u | wc -l`
				else
					TESTB="0"

				fi
				if [ ! -z "$TAGHEX" ] ; then
					TESTH=`$GREP -roiE -e "$TAGHEX" $1 | sort -u | wc -l`
				else
					TESTH="0"
				fi
				if [ ! -z "$TAGHEXPHP" ] ; then
					TESTHP=`$GREP -roiE -e "$TAGHEXPHP" $1 | sort -u | wc -l`
				else
					TESTHP="0"
				fi
				if [ ! -z "$TAGURI" ] ; then
					TESTU=`$GREP -roiE -e "$TAGURI" $1 | sort -u | wc -l`
				else
					TESTU="0"
				fi
				if [ ! -z "$TAGCLEAR2" ] ; then
					TESTC2=`$GREP -roiE -e "$TAGCLEAR2" $1 | sort -u | wc -l`
				else
					TESTC2="0"
				fi
				if [ ! -z "$TAGBASE642" ] ; then
					TESTB2=`$GREP -roiE -e "$TAGBASE642" $1 | sort -u | wc -l`
				else
					TESTB2="0"
				fi
				if [ ! -z "$TAGHEX2" ] ; then
					TESTH2=`$GREP -roiE -e "$TAGHEX2" $1 | sort -u | wc -l`
				else
					TESTH2="0"
				fi
				if [ ! -z "$TAGHEXPHP2" ] ; then
					TESTHP2=`$GREP -roiE -e "$TAGHEXPHP2" $1 | sort -u | wc -l`
				else
					TESTHP2="0"
				fi
				if [ ! -z "$TAGURI2" ] ; then
					TESTU2=`$GREP -roiE -e "$TAGURI2" $1 | sort -u | wc -l`
				else
					TESTU2="0"
				fi
				if [ "$TESTC" = "1" ] || [ "$TESTC" = "1" ] ; then 
					echo "[ $datelog ] [Detected] /!\ Suspicious file: $1" >> $WLOG
					echo "[ $datelog ] [Detected] /!\ File is probably $NAME" >> $WLOG
					echo "[ $datelog ] [Detected] /!\ Date in DB: $DATEADD" >> $WLOG
					echo "[ $datelog ] [Detected] /!\ Signature type: Clear" >> $WLOG
					action_file$1
				fi
				if [ "$TESTB" = "1" ] || [ "$TESTB2" = "1" ]  ; then 
					echo "[ $datelog ] [Detected] /!\ Suspicious file: $1" >> $WLOG
					echo "[ $datelog ] [Detected] /!\ File is probably $NAME" >> $WLOG
					echo "[ $datelog ] [Detected] /!\ Date in DB: $DATEADD" >> $WLOG
					echo "[ $datelog ] [Detected] /!\ Signature type: Base64" >> $WLOG				
					action_file$1
				fi
				if [ "$TESTH" = "1" ] || [ "$TESTH2" = "1" ]  ; then 
					echo "[ $datelog ] [Detected] /!\ Suspicious file: $1" >> $WLOG
					echo "[ $datelog ] [Detected] /!\ File is probably $NAME" >> $WLOG
					echo "[ $datelog ] [Detected] /!\ Date in DB: $DATEADD" >> $WLOG
					echo "[ $datelog ] [Detected] /!\ Signature type: Hexa" >> $WLOG				
					action_file$1
				fi			
				if [ "$TESTHP" = "1" ] || [ "$TESTHP2" = "1" ]  ; then 
					echo "[ $datelog ] [Detected] /!\ Suspicious file: $1" >> $WLOG
					echo "[ $datelog ] [Detected] /!\ File is probably $NAME" >> $WLOG
					echo "[ $datelog ] [Detected] /!\ Date in DB: $DATEADD" >> $WLOG
					echo "[ $datelog ] [Detected] /!\ Signature type: Hexa encoded" >> $WLOG				
					action_file$1
				fi
				if [ "$TESTU" = "1" ] || [ "$TESTU2" = "1" ]  ; then 
					echo "[ $datelog ] [Detected] /!\ Suspicious file: $1" >> $WLOG
					echo "[ $datelog ] [Detected] /!\ File is probably $NAME" >> $WLOG
					echo "[ $datelog ] [Detected] /!\ Date in DB: $DATEADD" >> $WLOG
					echo "[ $datelog ] [Detected] /!\ Signature type: URI/URL Encoded" >> $WLOG				
					action_file$1
				fi
			else 
				echo "[ $datelog ] [Info] Rules $line not actived." >> $WLOG
			fi
			sleep $SPEEDS
		done
		chmod $PERM $1
	else
		echo "[ $datelog ] [Info] File skiped by whitelisting$1" >> $WLOG			
	fi
}

# Function call after postif scan. Check and apply action.
action_file() { 
	if [ "$ACTION" = "RENAME" ] ; then
		mv -f $1 $1.suspected
		echo "[ $datelog ] [Detected] /!\ $1 rename to $1.suspected" >> $WLOG
	fi 
	if [ "$ACTION" = "MOVE" ] ; then
		mv -f $1 $QUARANTAINE
		echo "[ $datelog ] [Detected] /!\ $1 moved to $QUARANTAINE" >> $WLOG
	else
		echo "[ $datelog ] [Detected] /!\ $1 Warning only notify not action..." >> $WLOG
		# Restore file permision after check. 
		chmod $PERM $InoOutLine
	fi
	
	if [ "$MAILNOTIF" = "1" ] ; then 
		echo -e "AntiwebXploit detected Backdoor !\n======================================================\n\nServer:$FROMADDR\nFile:$1\nAction:$ACTION\nVirus Name:$NAME\nDate in DB:$DATEADD\nLink Info:$LINK\n\nPlease check your server vulnerability !\nDeamon webexploitscan." | email "$TO" "$SUBJECT" "$FROMADDR" "$FROM" 
		echo "[ $datelog ] [Mail] Notification mail send to $TO." >> $WLOG 
	else
		echo "[ $datelog ] [NOMail] Notification mail disabled." >> $WLOG
	fi 
}
